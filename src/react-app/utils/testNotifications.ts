// Utilit√°rio para testar o sistema de notifica√ß√µes

export const testNotificationSystem = {
  // Testar notifica√ß√£o toast
  testToast: (showToast: Function) => {
    showToast({
      title: 'üß™ Teste de Toast',
      message: 'Esta √© uma notifica√ß√£o de teste do sistema',
      type: 'info',
    });
  },

  // Testar notifica√ß√£o push
  testPushNotification: () => {
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification('üß™ Teste Push - IgrejaConnect', {
        body: 'Sistema de notifica√ß√µes funcionando corretamente!',
        icon: '/favicon.ico',
        badge: '/favicon.ico',
        tag: 'test-notification',
      });
      return true;
    }
    return false;
  },

  // Testar cria√ß√£o de notifica√ß√£o via API
  testApiNotification: async () => {
    try {
      const token = localStorage.getItem('supabase_token');
      const response = await fetch('/api/notifications', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: 'üß™ Teste de API',
          message: 'Notifica√ß√£o criada via API de teste',
          type: 'success',
          send_to_all: false,
          target_users: [], // Apenas para o usu√°rio atual
        }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Teste de API bem-sucedido:', result);
        return true;
      } else {
        console.error('‚ùå Erro no teste de API:', response.statusText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro no teste de API:', error);
      return false;
    }
  },

  // Testar notifica√ß√µes autom√°ticas de anivers√°rio
  testBirthdayNotifications: async () => {
    try {
      const token = localStorage.getItem('supabase_token');
      const response = await fetch('/api/notifications/auto/birthday', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Teste de anivers√°rios bem-sucedido:', result);
        return result;
      } else {
        console.error('‚ùå Erro no teste de anivers√°rios:', response.statusText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro no teste de anivers√°rios:', error);
      return false;
    }
  },

  // Testar notifica√ß√µes autom√°ticas de reuni√µes
  testMeetingNotifications: async () => {
    try {
      const token = localStorage.getItem('supabase_token');
      const response = await fetch('/api/notifications/auto/meetings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Teste de reuni√µes bem-sucedido:', result);
        return result;
      } else {
        console.error('‚ùå Erro no teste de reuni√µes:', response.statusText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro no teste de reuni√µes:', error);
      return false;
    }
  },

  // Executar todos os testes
  runAllTests: async (showToast: Function) => {
    console.log('üß™ Iniciando testes do sistema de notifica√ß√µes...');
    
    // Teste 1: Toast
    console.log('1. Testando toast...');
    testNotificationSystem.testToast(showToast);
    
    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Teste 2: Push Notification
    console.log('2. Testando push notification...');
    const pushResult = testNotificationSystem.testPushNotification();
    console.log(pushResult ? '‚úÖ Push notification OK' : '‚ö†Ô∏è Push notification n√£o dispon√≠vel');
    
    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Teste 3: API Notification
    console.log('3. Testando API de notifica√ß√µes...');
    const apiResult = await testNotificationSystem.testApiNotification();
    console.log(apiResult ? '‚úÖ API OK' : '‚ùå API com erro');
    
    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Teste 4: Birthday Notifications
    console.log('4. Testando notifica√ß√µes de anivers√°rio...');
    const birthdayResult = await testNotificationSystem.testBirthdayNotifications();
    console.log(birthdayResult ? '‚úÖ Anivers√°rios OK' : '‚ùå Anivers√°rios com erro');
    
    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Teste 5: Meeting Notifications
    console.log('5. Testando notifica√ß√µes de reuni√µes...');
    const meetingResult = await testNotificationSystem.testMeetingNotifications();
    console.log(meetingResult ? '‚úÖ Reuni√µes OK' : '‚ùå Reuni√µes com erro');
    
    console.log('üéâ Testes conclu√≠dos!');
    
    // Toast final
    showToast({
      title: 'üéâ Testes conclu√≠dos!',
      message: 'Verifique o console para ver os resultados detalhados',
      type: 'success',
    });
    
    return {
      toast: true,
      push: pushResult,
      api: apiResult,
      birthday: !!birthdayResult,
      meeting: !!meetingResult,
    };
  },
};

// Adicionar ao window para acesso via console
if (typeof window !== 'undefined') {
  (window as any).testNotifications = testNotificationSystem;
}